{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../speicher.service\";\nimport * as i2 from \"@ionic/angular\";\nimport * as i3 from \"../dialog-toast-helfer.service\";\nimport * as i4 from \"@angular/common\";\n\nfunction ListePage_ion_item_sliding_15_h3_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h3\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const bedeutung_r4 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(bedeutung_r4);\n  }\n}\n\nfunction ListePage_ion_item_sliding_15_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"ion-item-sliding\", null, 2)(2, \"ion-item\")(3, \"ion-label\")(4, \"h2\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, ListePage_ion_item_sliding_15_h3_6_Template, 2, 1, \"h3\", 1);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"ion-item-options\", 3)(8, \"ion-item-option\", 4);\n    i0.ɵɵlistener(\"click\", function ListePage_ion_item_sliding_15_Template_ion_item_option_click_8_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const eintrag_r1 = restoredCtx.$implicit;\n\n      const _r2 = i0.ɵɵreference(1);\n\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.onLoeschen(eintrag_r1.abkuerzung, _r2);\n    });\n    i0.ɵɵtext(9, \"L\\u00F6schen\");\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const eintrag_r1 = ctx.$implicit;\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\"\", eintrag_r1.abkuerzung, \":\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", eintrag_r1.bedeutungen);\n  }\n}\n/**\r\n * Seite um alle Abkürzungen und die zugehörigen Bedeutungen anzuzeigen.\r\n */\n\n\nexport let ListePage = /*#__PURE__*/(() => {\n  class ListePage {\n    /**\r\n     * Konstruktor für Dependency Injection.\r\n     */\n    constructor(speicherService, alertCtrl, dialogToastHelferService) {\n      this.speicherService = speicherService;\n      this.alertCtrl = alertCtrl;\n      this.dialogToastHelferService = dialogToastHelferService;\n    }\n    /**\r\n     * Lifecycle-Methode, die Anzahl der gespeicherten Abkürzungen aktualisiert.\r\n     * Es wird die Lifecycle-Methode `ionViewWillEnter()` statt `ionViewDidEnter()`\r\n     * überschrieben, weil so der Wert schon aktualisiert wird, bevor die Seite\r\n     * sichtbar wird (man sieht also nicht, wie die Zahl geändert wird).\r\n     * <br><br>\r\n     *\r\n     * Doku zu Lifecycle-Methoden von Ionic:\r\n     * https://ionicframework.com/docs/angular/lifecycle\r\n     */\n\n\n    ionViewWillEnter() {\n      this.holeDatenVonSpeicherService();\n    }\n    /**\r\n     * Holt Daten von SpeicherService und kopiert sie in Member-Variablen.\r\n     * Muss in Lifecycle-Methode vor Laden der Seite aufgerufen werden und auch nach Löschen eines\r\n     * Listeneintrags (einer Abkürzung).\r\n     */\n\n\n    holeDatenVonSpeicherService() {\n      this.anzahlAbkuerzungenPromise = this.speicherService.getAnzahlGespeicherteAbkuerzungen();\n      this.abkBedeutungenArrayPromise = this.speicherService.holeAlleAbkuerzungenUndBedeutungen();\n    }\n    /**\r\n     * Button-Event-Handler für Löschen einer einzelnen Abkürzung.\r\n     *\r\n     * @param abkuerzung  Zu löschende Abkürzung.\r\n     *\r\n     * @param slider  Slider-Element, das im Fall des Abbruchs programmatisch zu schließen ist.\r\n     */\n\n\n    onLoeschen(abkuerzung, slider) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const jaButton = {\n          text: \"Weiter\",\n          handler: () => __awaiter(this, void 0, void 0, function* () {\n            console.log(`Sollte jetzt ${abkuerzung} löschen.`);\n            yield this.speicherService.abkuerzungLoeschen(abkuerzung);\n            const erfolgsNachricht = `Abkürzung \"${abkuerzung}\" wurde mit allen Bedeutungen gelöscht.`;\n            this.dialogToastHelferService.zeigeToast(erfolgsNachricht);\n            this.holeDatenVonSpeicherService();\n          })\n        };\n        const abbrechenButton = {\n          text: \"Abbrechen\",\n          role: \"Cancel\",\n          handler: () => {\n            this.dialogToastHelferService.zeigeToast(\"Löschen abgebrochen.\");\n            slider.close();\n          }\n        };\n        const sicherheitsfrage = `Wollen Sie die Abkürzung \"${abkuerzung}\" mit allen Bedeutungen wirklich löschen?`;\n        const meinAlert = yield this.alertCtrl.create({\n          header: \"Sicherheitsfrage\",\n          message: sicherheitsfrage,\n          backdropDismiss: false,\n          buttons: [jaButton, abbrechenButton]\n        });\n        yield meinAlert.present();\n      });\n    }\n\n  }\n\n  ListePage.ɵfac = function ListePage_Factory(t) {\n    return new (t || ListePage)(i0.ɵɵdirectiveInject(i1.SpeicherService), i0.ɵɵdirectiveInject(i2.AlertController), i0.ɵɵdirectiveInject(i3.DialogToastHelferService));\n  };\n\n  ListePage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ListePage,\n    selectors: [[\"app-liste\"]],\n    decls: 17,\n    vars: 6,\n    consts: [[\"slot\", \"start\"], [4, \"ngFor\", \"ngForOf\"], [\"slidingItem\", \"\"], [\"side\", \"end\"], [\"color\", \"danger\", 3, \"click\"]],\n    template: function ListePage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\")(2, \"ion-buttons\", 0);\n        i0.ɵɵelement(3, \"ion-menu-button\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \"Liste der Abk\\u00FCrzungen\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"ion-content\")(7, \"h2\");\n        i0.ɵɵtext(8);\n        i0.ɵɵpipe(9, \"async\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(10, \" \\u00A0 \");\n        i0.ɵɵelementStart(11, \"p\");\n        i0.ɵɵtext(12, \"Listeneintrag zum L\\u00F6schen nach links ziehen.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(13, \" \\u00A0 \");\n        i0.ɵɵelementStart(14, \"ion-list\");\n        i0.ɵɵtemplate(15, ListePage_ion_item_sliding_15_Template, 10, 2, \"ion-item-sliding\", 1);\n        i0.ɵɵpipe(16, \"async\");\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(8);\n        i0.ɵɵtextInterpolate1(\"Anzahl gespeicherter Abk\\u00FCrzungen: \", i0.ɵɵpipeBind1(9, 2, ctx.anzahlAbkuerzungenPromise), \"\");\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(16, 4, ctx.abkBedeutungenArrayPromise));\n      }\n    },\n    directives: [i2.IonHeader, i2.IonToolbar, i2.IonButtons, i2.IonMenuButton, i2.IonTitle, i2.IonContent, i2.IonList, i4.NgForOf, i2.IonItemSliding, i2.IonItem, i2.IonLabel, i2.IonItemOptions, i2.IonItemOption],\n    pipes: [i4.AsyncPipe],\n    styles: [\"\"]\n  });\n  return ListePage;\n})();","map":null,"metadata":{},"sourceType":"module"}